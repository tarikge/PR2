#include <iostream>
using namespace std;

// Z0.1 :: alokacija dinamickog niza za pohranu teksta
char* alocirajTekst(const char* izvor) {
    // Implementirati funkciju
    return nullptr;
}

// Z0.2 :: Ispis niza (tipa T) gdje se delimiter ispisuje izmedju dva susjedna elementa tog niza
template<class T>
void ispis(T niz[], int velicina, const char* delimiter = ", ") {
    // Implementirati funkciju
}

// Z0.3 :: genericka funkcija koja radi zamjenu elemenata [potrebno je koristiti za sortiranje vrijednosti]
template< class T>
void zamjena(T& el1, T& el2) {
    // Implementirati funkciju
}

/* Z0.4 :: Napisati genericku funkciju 'BubbleSort' za sortiranje niza elemenata tipa T
       :: iskoristiti vec postojeci kod za sortiranje niza integera ('BubbleSort.txt') i prepraviti ga
       :: reverse' polje oznacava da li se radi o uzlaznom ili silaznom sortiranju
*/
template<class T>
void bubbleSort(T niz[], int vel, bool reverse = false) {
    // Implementirati funkciju
}

class Datum
{
    int* _dan = nullptr;
    int* _mjesec = nullptr;
    int* _godina = nullptr;
public:
    // Z1.1 :: getteri
    int getDan() const { return (_dan == nullptr) ? 1 : *_dan; }
    int getMjesec() const { return (_mjesec == nullptr) ? 1 : *_mjesec; }
    int getGodina() const { return (_godina == nullptr) ? 2023 : *_godina; }

    // Z1.2 :: setteri
    void setDan(int dan) {
        // Implementirati funkciju
    }
    void setMjesec(int mjesec) {
        // Implementirati funkciju
    }
    void setGodina(int godina) {
        // Implementirati funkciju
    }
    // Z1.3 :: dflt. ctor 
    Datum() {
    }
    // Z1.4 :: user-def. ctor
    Datum(int d, int m, int g) {
        // Implementirati funkciju
    }
    // Z1.5 :: copy ctor
    Datum(const Datum& obj) {
        // Implementirati funkciju
    }

    // Z1.6 :: operator = 
    Datum& operator =(const Datum& obj) {
        // Implementirati funkciju
        return *this;
    }
    // Z1.7 :: staticka funkcija za provjeru prijestupnosti godine 
    static bool isLeap(int godina) {
        // Implementirati funkciju
        return false;
    }
    // Z1.8 :: funkcija za provjeru validnosti datuma 
    bool checkIfValid() {
        // Implementirati funkciju
        return false;
    }
    // Z1.9 :: staticka funkcija za generisanje slucajnog datuma. generisani datum mora imati validne vrijednosti
    static Datum getRandomDatum() {
        // Implementirati funkciju
        return Datum();
    }
    // Z1.10 :: destruktor
    ~Datum() {
        // Implementirati funkciju
    }
};

// Z1.11 ::ispisati datum
ostream& operator << (ostream& COUT, const Datum& obj) {
    // Implementirati funkciju
    return COUT;
}
// Z1.12 :: porediti dva datuma po vrijednostima atributa
bool operator == (const Datum& d1, const Datum& d2) {
    // Implementirati funkciju
    return false;
}
bool operator != (const Datum& d1, const Datum& d2) {
    return !(d1 == d2);
}

// Z1.13 :: operatori '>', '>=', '<', '<='
bool operator > (const Datum& d1, const Datum& d2) {
    // Implementirati funkciju
    return false;
}
bool operator >= (const Datum& d1, const Datum& d2) {
    return (d1 > d2) || (d1 == d2);
}
bool operator <(const Datum& d1, const Datum& d2) {
    return !(d1 >= d2);
}
bool operator <=(const Datum& d1, const Datum& d2) {
    return !(d1 > d2);
}


// kolekcija elemenata 'Vektor' (tipa T) sa mogucnoscu dinamickog prosirivanja
template<class T>
class Vektor {
    int _trenutno = 0;
    int _maxElemenata;
    T* _elementi = nullptr;
public:
    // Z2.1 :: getteri
    int getTrenutno() const { return _trenutno; }
    int getMaxElemenata() const { return _maxElemenata; }
    T* getElementi() const { return _elementi; }

    // Z2.2 :: setteri (u ovom slucaju imamo samo jednu setter funkciju)
    void setElementi(int trenutno, int maxElemenata, T* elementi = nullptr) {
        // Implementirati funkciju
    }
    // Z2.3 :: funkcija za dodavanje elementa tipa 'T'.
    // U slucaju da je brojac dosao do kraja -- uraditi prosirivanje niza za 10 elemenata.
    void add(const T& element) {
        // Implementirati funkciju
    }

    // Z2.4 :: funkcija za uklanjanje zadnjeg elementa iz niza
    bool removeZadnji() {
        // Implementirati funkciju
        return false;
    }

    // Z2.5 :: funkcija za prosirivanje dinamickog niza
    void expandElementi(int uvecanje) {
        // Implementirati funkciju
    }

    // Z2.6 :: dflt ctor
    Vektor(int maxElemenata = 100) {
        // Implementirati funkciju
    }
    // Z2.7 :: copy ctor :: Kopirati vrijednosti jednog vektora u drugi
    Vektor(const Vektor<T>& obj) {
        // Implementirati funkciju
    }
    // Z2.8 :: operator '='
    Vektor<T>& operator = (const Vektor<T>& obj) {
        // Implementirati funkciju;
        return *this;
    }
    // Z2.9 :: operator '[]' za dohvacanje pojedinacne vrijednosti iz niza
    T& operator [] (int index) const {
        return _elementi[index];
    }
 
    // Z2.10 :: funkcija za umetanje vrijednosti 'element' u niz na lokaciju 'index'.
    // ukoliko je '_trenutno' jednako _maxElemenata, uraditi prosirivanje niza za 10
    // adekvatno pomjeriti elemente udesno.
    // postaviti element na lokaciju index
    // uvecati vrijednost brojaca '_trenutno' za 1
    void insertAt(int index, T element) {
        // Implementirati funkciju
    }

    // Z2.11 :: funkcija za brisanje elementa na lokaciji 'index'
    // pomjeriti na adekvatan nacin elemente ulijevo
    // umanjiti vrijednost brojaca '_trenutno'
    bool removeAt(int index) {
        // Implementirati funkciju
        return false;
    }

    // Z2.12 :: funkcija za provjeru postojanosti vrijednosti 'element' u okviru dinamickog niza
    bool checkIfContains(T element) {
        // Implementirati funkciju
        return false;
    }

    // Z2.13 :: Sortiranje elemenata na osnovu specificiranog algoritma
    void sortiraj(void(*algoritam)(T[], int, bool), bool reverse = false) {
        // Implementirati funkciju
    }

    // Z2.14 :: destruktor
    ~Vektor() {
        // Implementirati funkciju
    }
};

// Z2.15 :: ispisuje elemente vektora. za pristup elementima koristiti preklopljeni operator '[]'
template<class T>
ostream& operator << <>(ostream& COUT, const Vektor<T>& obj) {
    // Implementirati funkciju
    return COUT;
}

class Fudbaler {
    char* _ime = nullptr;
    char* _prezime = nullptr;
    Datum* _datumRodjenja = nullptr;
    float* _visina = nullptr; // npr. 1.75 m
    char _pozicija[50] = ""; //pozicija na terenu

    int _trenutnoNagrada = 0; //brojac :: krece od 0
    char* _nagrade[100] = { nullptr }; // niz tekstova ["Zlatna lopta 2023", "Zlatna lopta 2022", "Najbolji strijelac", ...]
public:
    // Z3.1 :: getteri
    const char* getIme() const { return (_ime == nullptr) ? "" : _ime; }
    const char* getPrezime() const { return (_prezime == nullptr) ? "" : _prezime; }
    Datum getDatumRodjenja() const { return (_datumRodjenja == nullptr) ? Datum() : *_datumRodjenja; }
    float getVisina() const { return (_visina == nullptr) ? 0.0f : *_visina; }
    const char* getPozicija() const { return _pozicija; }
    int getTrenutnoNagrada() const { return _trenutnoNagrada; }
    char** getNagrade() const { return (char**)_nagrade; }

    // Z3.2 :: setteri
    void setIme(const char* ime) {
        // Implementirati funkciju
    }
    void setPrezime(const char* prezime) {
        // Implementirati funkciju
    }
    void setDatumRodjenja(Datum datumRodjenja) {
        // Implementirati funkciju
    }
    void setVisina(float visina) {
        // Implementirati funkciju
    }
    void setPozicija(const char* pozicija) {
        // Implementirati funkciju
    }

    // Z3.3 :: funkcija 'setNagrade'. Obrisati stare nagrade (proci kroz svaki pokazivac)
    // alocirati nove ukoliko je dvostruki pokazivac 'nagrade' razlicit od nullptr
    void setNagrade(int trenutno, char** nagrade = nullptr) {
        // Implementirati funkciju
    }

    // Z3.4 :: dodavanje nove nagrade u niz pokazivaca '_nagrade'. Uraditi alokaciju prilikom dodavanja
    bool operator()(const char* nagrada) {
        // Implementirati funkciju
        return false;
    }
    // dflt ctor
    Fudbaler() {
    }
    // Z3.5 :: user-defined ctor
    Fudbaler(const char* ime, const char* prezime, Datum datum, float visina, const char* pozicija) {
        // Implementirati funkciju
    }
    // Z3.6 :: copy ctor
    Fudbaler(const Fudbaler& obj) {
        // Implementirati funkciju
    }
    // Z3.7 :: operator '='
    Fudbaler& operator = (const Fudbaler& obj) {
        // Implementirati funkciju
        return *this;
    }

    // Z3.8 :: dohvacanje jednog elementa iz niza '_nagrade'
    const char* operator[] (int index) const {
        // Implementirati funkciju
        return nullptr;
    }

    // Z3.9 :: dtor
    ~Fudbaler() {
        // Implementirati funkciju
    }
};

// Z3.10 :: operator '<<'
ostream& operator <<(ostream& COUT, const Fudbaler& fudbaler) {
    // Implementirati funkciju
    return COUT;
}

// Z3.11 :: operator '=='. porediti sve atribute jednog sa odgovarajucim atributima drugog objekta
bool operator == (const Fudbaler& f1, const Fudbaler& f2) {
    if (strcmp(f1.getIme(), f2.getIme()) != 0 ||
        strcmp(f1.getPrezime(), f2.getPrezime()) != 0 ||
        f1.getDatumRodjenja() != f2.getDatumRodjenja() ||
        f1.getVisina() != f2.getVisina() ||
        strcmp(f1.getPozicija(), f2.getPozicija()) != 0 ||
        f1.getDatumRodjenja() != f2.getDatumRodjenja())
        return false;
    for (int i = 0; i < f1.getTrenutnoNagrada(); i++)
        if (strcmp(f1[i], f2[i]) != 0)
            return false;
    return true;
}
bool operator != (const Fudbaler& f1, const Fudbaler& f2) {
    return !(f1 == f2);
}


class FudbalskiTim {
    const char* _naziv = nullptr;
    Datum _datumOsnivanja;
    char* _domaciStadion = nullptr;
    Vektor<Fudbaler> _fudbaleri;
public:
    // Z4.1 :: getteri
    const char* getNaziv() const { return (_naziv == nullptr) ? "" : _naziv; }
    Datum getDatumOsnivanja() const { return _datumOsnivanja; }
    const char* getDomaciStadion() const { return (_domaciStadion == nullptr) ? "" : _domaciStadion; }
    Vektor<Fudbaler> getFudbaleri() const { return _fudbaleri; }

    // Z4.2 :: setteri
    void setNaziv(const char* naziv) {
        // Implementirati funkciju
    }
    void setDatumOsnivanja(Datum datumOsnivanja) {
        // Implementirati funkciju
    }
    void setDomaciStadion(const char* domaciStadion) {
        // Implementirati funkciju
    }
    void setFudbaleri(Vektor<Fudbaler> fudbaleri) {
        // Implementirati funkciju
    }

    // Z4.3 :: dflt. ctor
    FudbalskiTim() {
    }
    // Z4.4 :: user-defined ctor
    FudbalskiTim(const char* naziv, Datum datumOsnivanja, const char* domaciStadion) {
        // Implementirati funkciju
    }
    // Z4.5 :: copy-ctor
    FudbalskiTim(const FudbalskiTim& obj) {
        // Implementirati funkciju
    }
    // Z4.6 :: operator '='
    FudbalskiTim& operator = (const FudbalskiTim& obj) {
        // Implementirati funkciju
        return *this;
    }

    // Z4.7 :: operator '+=' da dodavanje fudbalera u vektor '_fudbaleri'  
    void operator += (Fudbaler fudbaler) {
        // Implementirati funkciju
    }
    // Z4.8 :: operator '[]' za dohvacanje fudbalera iz vektora '_fudbaleri' na lokaciji 'index'
    Fudbaler& operator[](int index) const {
        return _fudbaleri[index];
    }
    // Z4.9 :: dtor
    ~FudbalskiTim() {
        // Implementirati funkciju
    }
};

// Z4.10 :: Ispisati sva obiljezja, te imena i prezimena fudbalera, kao i njihove pozicije
ostream& operator << (ostream& COUT, const FudbalskiTim& tim) {
    // Implementirati funkciju
    return COUT;
}

// Z4.11 :: Poredjenje objekata [fudbalskih timova] (poredjenje svih atributa) [all vs all]
// Ukoliko postoji makar jedna razlika u vrijednostima -- vratiti vrijednost FALSE
bool operator == (const FudbalskiTim& tim1, const FudbalskiTim& tim2) {
    if (strcmp(tim1.getNaziv(), tim2.getNaziv()) != 0 ||
        strcmp(tim1.getDomaciStadion(), tim2.getDomaciStadion()) != 0 ||
        tim1.getDatumOsnivanja() != tim2.getDatumOsnivanja() ||
        tim1.getFudbaleri().getTrenutno() != tim2.getFudbaleri().getTrenutno())
        return false;
    for (int i = 0; i < tim1.getFudbaleri().getTrenutno(); i++)
        if (tim1[i] != tim2[i])
            return false;
    return true;
}
bool operator != (const FudbalskiTim& tim1, const FudbalskiTim& tim2) {
    return !(tim1 == tim2);
}

class Utakmica {
    pair<FudbalskiTim, FudbalskiTim> _timovi; // Domacin : Gost
    pair<int, int> _golovi{ 0, 0 }; // Golovi domacina : Golovi gosta
public:
    // Z5.1 :: getteri
    FudbalskiTim getDomacin() const { return _timovi.first; }
    FudbalskiTim getGost() const { return _timovi.second; }
    pair<int, int> getGolovi() const { return _golovi; }

    // Z5.2 :: setteri
    void setDomacin(FudbalskiTim tim) {
        // Implementirati funkciju
    }
    void setGost(FudbalskiTim tim) {
        // Implementirati funkciju
    }
    void setGolovi(pair<int, int> golovi) {
        // Implementirati funkciju
    }
    // Z5.3 :: funkcija za dodavanje gola u pair objekt '_golovi'
    void dodajGol(int golZa) {
        // Implementirati funkciju
    }
    // Z5.4 :: dflt ctor
    Utakmica() {
    }
    // Z5.5 :: user-defined ctor
    Utakmica(FudbalskiTim domacin, FudbalskiTim gost) {
        // Implementirati funkciju
    }
    // Z5.6 :: copy ctor
    Utakmica(const Utakmica& obj){
        // Implementirati funkciju
    }
    // Z5.7 :: operator '='
    Utakmica& operator = (const Utakmica& obj) {
        // Implementirati funkciju
        return *this;
    }
    // Z5.8 :: dtor
    ~Utakmica() {
    }
};

// Z5.9 :: operator '<<' za ispis podataka o utakmici
/* ispisati utakmicu u sljedecem formatu :
        Stadion: Camp Nou
        Barcelona - Arsenal [2:2]
*/
ostream& operator <<(ostream& COUT, const Utakmica& utakmica) {
    // Implementirati funkciju
    return COUT;
}
// Z5.10 :: uporedba svih atributa jedne utakmice sa atributima druge utakmice
bool operator == (const Utakmica& u1, const Utakmica& u2) {
    // Implementirati funkciju
    return true;
}

void zadatak1() {
    cout << ":::::::::: Klasa Datum :::::::::::\n";
    Datum aprilFoolsDay(1, 4, 2023);
    Datum laborDay(1, 5, 2023);
    Datum newYearsEve(31, 12, 2023);
    Datum d1(aprilFoolsDay);
    Datum d2 = laborDay;
    Datum d3;
    d3 = newYearsEve;
    cout << "Prvi april " << aprilFoolsDay << endl;
    cout << "Prvi maj " << laborDay << endl;
    cout << "Nova godina " << newYearsEve << endl;
    cout << endl;
    cout << ":::::::::: Generisanje slucajnih datuma :::::::::::\n";
    for (int i = 0; i < 20; i++)
        cout << Datum::getRandomDatum() << endl;

    cout << "\n:::::::::: Kreiranje niza slucajnih datuma [velicina = 10] :::::::::::\n";
    const int vel = 10;
    Datum datumi[vel];
    for (int i = 0; i < vel; i++)
        datumi[i] = Datum::getRandomDatum();

    cout << "\nNiz slucajnih datuma prije sortiranja: " << endl;
    ispis(datumi, vel, ", ");
    cout << "\nNiz slucajnih datuma poslije uzlaznog sortiranja: " << endl;
    bubbleSort(datumi, vel);
    ispis(datumi, vel, ", ");
    cout << "\nNiz slucajnih datuma poslije silaznog sortiranja: " << endl;
    bubbleSort(datumi, vel, true);
    ispis(datumi, vel, ", ");

    cout << "\nDealokacija...." << endl;
}

void zadatak2() {
    cout << ":::::::::: Vektor<int> :::::::::::\n";
    Vektor<int> nums(15);
    int brojOcjena = 30;
    for (int i = 0; i < brojOcjena; i++)
        nums.add(rand() % 10 + 1);

    cout << "\nIspis elemenata vektora." << endl;
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nUklanjanje zadnjeg elementa. " << endl;
    nums.removeZadnji();
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nInsertovanje elementa -15 na lokaciju [3]. " << endl;
    nums.insertAt(3, -15);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nInsertovanje elementa -9 na lokaciju [0]. " << endl;
    nums.insertAt(0, -9);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nInsertovanje elementa -13 na lokaciju [0]. " << endl;
    nums.insertAt(0, -13);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nBrisanje elementa na lokaciji [2]. " << endl;
    nums.removeAt(2);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nBrisanje elementa na lokaciji [2]. " << endl;
    nums.removeAt(2);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nSortiranje elemenata. [uzlazno]" << endl;
    nums.sortiraj(bubbleSort);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    cout << "\nSortiranje elemenata. [silazno]" << endl;
    nums.sortiraj(bubbleSort, true);
    ispis(nums.getElementi(), nums.getTrenutno(), ", ");

    Vektor<int> v2(nums);
    Vektor<int> v3;
    v3 = v2;
    cout << "\nDealokacija..." << endl;
}

void zadatak3() {
    cout << "::::::::::klasa Fudbaler:::::::::::\n";
    Fudbaler gandhi;
    gandhi.setIme("Mohandas");
    gandhi.setPrezime("Gandhi");
    gandhi.setVisina(1.70f);
    gandhi.setDatumRodjenja(Datum(5, 5, 1990));
    gandhi.setPozicija("Obrambeni vezni");
    //Dodjeljivanje nagrada igracu
    gandhi("Fair play award 2018"); // poziv operatora '()' za dodavanje novog elementa u niz '_nagrade'
    gandhi("Fair play award 2019");
    gandhi("Fair play award 2020");
    gandhi("Fair play award 2023");
    gandhi("The best team leader award 2019");
    gandhi("The best team leader award 2020");
    gandhi("The greatest comeback award 2020");
    gandhi("The greatest comeback award 2023");
    gandhi("Sportsmanship award 2019");
    gandhi("Sportsmanship award 2020");
    gandhi("The most effective player vs. England national team 2020");
    gandhi("The most effective player vs. England national team 2023");
    gandhi("The 1st player to score 5 goals vs. England in a single match");
    gandhi("The best Indian football player of all time");
    cout << gandhi << "\n";

    cout << "Testiranje user-def. konstruktora: ";
    Fudbaler gandhi2(gandhi.getIme(), gandhi.getPrezime(), gandhi.getDatumRodjenja(), gandhi.getVisina(), gandhi.getPozicija());
    for (int i = 0; i < gandhi.getTrenutnoNagrada(); i++)
        gandhi2(gandhi[i]); // dodajemo nagrade drugom objektu
    cout << ((gandhi == gandhi2) ? "OK" : "") << endl;

    cout << "Testiranje konstruktora kopije: ";
    Fudbaler gandhiImpostor(gandhi);
    cout << ((gandhi == gandhiImpostor) ? "OK" : "Nije OK") << endl;

    cout << "Testiranje move konstruktora: ";
    Fudbaler gandhiMover(move(gandhiImpostor));
    cout << ((gandhi == gandhiMover) ? "OK" : "Nije OK") << endl;

    cout << "Testiranje operatora '=': ";
    Fudbaler martinLutherKing;
    martinLutherKing = gandhi;
    cout << ((gandhi == martinLutherKing) ? "OK" : "Nije OK") << endl;
    cout << "Dealokacija..." << endl;
}

void zadatak4() {
    cout << "::::::::::klasa FudbalskiTim:::::::::::\n";
    Fudbaler trump("Donald J.", "Trump", Datum(1, 3, 2150), 1.66f, "Centralni napadac");
    Fudbaler dalaiLama("Tenzin", "Gyatso", Datum(5, 3, 2151), 1.78f, "Obrambeni vezni");
    Fudbaler superSemir("Dr. Semir", "Osmanagic", Datum(5, 3, 2150), 1.85f, "Golman");
    Fudbaler ciroImpostor("Tarik", "Filipovic", Datum(5, 3, 2149), 1.85f, "Stoper");
    Fudbaler kreso("Kresimir", "Misak", Datum(5, 3, 2158), 1.66f, "Krilni vezni");
    Fudbaler theForbiddenOne("Chuck", "Norris", Datum(32, 12, 2154), 2.5f, "Na svim pozicijama istovremeno");

    FudbalskiTim osvajaciGalaksije;
    osvajaciGalaksije.setNaziv("Osvajaci Galaksije (F.C)");
    osvajaciGalaksije.setDomaciStadion("Milenijsko gnijezdo");
    osvajaciGalaksije.setDatumOsnivanja(Datum(5, 5, 2100));

    osvajaciGalaksije += trump;
    osvajaciGalaksije += dalaiLama;
    osvajaciGalaksije += superSemir;
    osvajaciGalaksije += ciroImpostor;
    osvajaciGalaksije += kreso;
    osvajaciGalaksije += theForbiddenOne;
    cout << osvajaciGalaksije << endl;

    cout << "Testiranje user-def. konstruktora: ";
    FudbalskiTim galaktikosi(osvajaciGalaksije.getNaziv(), osvajaciGalaksije.getDatumOsnivanja(), osvajaciGalaksije.getDomaciStadion());
    galaktikosi.setFudbaleri(osvajaciGalaksije.getFudbaleri());
    cout << ((osvajaciGalaksije == galaktikosi) ? "OK" : "Nije OK") << endl;

    cout << "Testiranje konstruktora kopije: ";
    FudbalskiTim osvajaci2(osvajaciGalaksije);
    cout << ((osvajaciGalaksije == osvajaci2) ? "OK" : "Nije OK") << endl;

    cout << "Testiranje operatora '=': ";
    FudbalskiTim osvajaci4;
    osvajaci4 = osvajaciGalaksije;
    cout << ((osvajaci4 == osvajaciGalaksije) ? "OK" : "Nije OK") << endl;
    cout << "Dealokacija..." << endl;
}

void zadatak5() {
    cout << "::::::::::klasa Utakmica:::::::::::\n";
    //Tim :: 1
    Fudbaler sleepyJoe("Joe", "Biden", Datum(3, 4, 1950), 1.77f, "Obrambeni vezni");
    Fudbaler stableTrump("Donald J.", "Trump", Datum(5, 4, 1951), 1.88f, "Centralni napadac");
    Fudbaler lyingTed("Ted", "Cruz", Datum(6, 6, 1952), 1.8f, "Centralni vezni");
    Fudbaler theLittleMan("Marco", "Rubio", Datum(7, 7, 1953), 1.6f, "Ofanzivni vezni");
    Fudbaler lowEnergyJeb("Jeb", "Bush", Datum(8, 8, 1954), 1.68f, "Golman");
    //Tim :: 2
    Fudbaler metaLord("Mark", "Zuckerberg", Datum(3, 4, 1960), 1.74f, "Obrambeni vezni");
    Fudbaler elonTheMartian("Elon", "Musk", Datum(5, 5, 1961), 1.77f, "Leteci napadac");
    Fudbaler codeJeff("Jeff", "Bezos", Datum(5, 3, 1961), 1.8f, "Centralni vezni");
    Fudbaler theVaxGuy("Bill", "Gates", Datum(15, 3, 1955), 1.85f, "Golman");
    Fudbaler cryptoGuru("Satoshi", "Nakamoto", Datum(15, 3, 1955), 1.85f, "Nevidljiv na terenu");

    FudbalskiTim cowboys("Cowboys (F.C)", Datum(1, 3, 1960), "Wild West Park");
    cowboys += sleepyJoe;
    cowboys += stableTrump;
    cowboys += lyingTed;
    cowboys += theLittleMan;
    cowboys += lowEnergyJeb;

    FudbalskiTim aliens("Aliens (F.C)", Datum(5, 6, 1955), "Galaxy Centre");
    aliens += metaLord;
    aliens += elonTheMartian;
    aliens += codeJeff;
    aliens += theVaxGuy;
    aliens += cryptoGuru;

    Utakmica spaceClassico;
    spaceClassico.setDomacin(cowboys);
    spaceClassico.setGost(aliens);
    spaceClassico.dodajGol(1); //gol za domacina
    spaceClassico.dodajGol(1); //gol za domacina
    spaceClassico.dodajGol(2); //gol za goste
    spaceClassico.dodajGol(2); //gol za goste
    spaceClassico.dodajGol(1); //gol za domacina
    spaceClassico.dodajGol(1); //gol za domacina
    cout << spaceClassico << endl;

    cout << "Testiranje user-def. konstruktora: ";
    Utakmica derbi(cowboys, aliens);
    derbi.dodajGol(1);
    derbi.dodajGol(1);
    derbi.dodajGol(2);
    derbi.dodajGol(2);
    derbi.dodajGol(1);
    spaceClassico.setGolovi(derbi.getGolovi());
    cout << ((spaceClassico == derbi) ? "OK" : "Nije OK") << endl;
    cout << "Testiranje konstruktora kopije: ";
    Utakmica kopija(spaceClassico);
    cout << ((spaceClassico == kopija) ? "OK" : "Nije OK") << endl;

    cout << "Testiranje move konstruktora: ";
    Utakmica clashOfTheTitans(move(kopija));
    cout << ((spaceClassico == clashOfTheTitans) ? "OK" : "Nije OK") << endl;

    cout << "Testiranje operatora '=': ";
    Utakmica mecNaseGeneracije;
    mecNaseGeneracije = spaceClassico;
    cout << ((spaceClassico == mecNaseGeneracije) ? "OK" : "Nije OK") << endl;
    cout << "Dealokacija..." << endl;
}

void menu() {
    int nastaviDalje = 1;
    while (nastaviDalje == 1) {
        int izbor = 0;
        do {
            system("cls");
            cout << "***Zadaci***" << endl;
            cout << "(1) zadatak 1" << endl;
            cout << "(2) zadatak 2" << endl;
            cout << "(3) zadatak 3" << endl;
            cout << "(4) zadatak 4" << endl;
            cout << "(5) zadatak 5" << endl;
            cout << "Unesite odgovarajuci broj zadatka za testiranje: -->: ";
            cin >> izbor;
            cout << endl;
        } while (izbor < 1 || izbor > 5);
        switch (izbor) {
        case 1: zadatak1(); cout << "zadatak 1. Done." << endl; break;
        case 2: zadatak2(); cout << "zadatak 2. Done." << endl; break;
        case 3: zadatak3(); cout << "zadatak 3. Done." << endl; break;
        case 4: zadatak4(); cout << "zadatak 4. Done." << endl; break;
        case 5: zadatak5(); cout << "zadatak 5. Done." << endl; break;
        default:break;
        }
        do {
            cout << "DA LI ZELITE NASTAVITI DALJE? (1/0): ";
            cin >> nastaviDalje;
        } while (nastaviDalje != 0 && nastaviDalje != 1);
    }
}
int main() {
    menu();
    return 0;
}
